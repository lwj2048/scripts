name: build vllm

on:
  workflow_dispatch:  # 手动触发

jobs:
  start-ssh-server:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
            
      - name: 安装 davfs2
        run: sudo apt update && sudo apt install -y davfs2

      - name: 创建挂载目录
        run: sudo mkdir -p /mnt/share

      - name: 配置凭据文件（root 访问）
        run: |
          echo "https://app.koofr.net/dav/Koofr/ ${{ secrets.KOOFR_USERNAME }} ${{ secrets.KOOFR_PASSWORD }}" | sudo tee /etc/davfs2/secrets > /dev/null
          sudo chmod 600 /etc/davfs2/secrets

      - name: 允许 root 访问 WebDAV
        run: echo "use_locks 0" | sudo tee -a /etc/davfs2/davfs2.conf > /dev/null

      - name: 以 root 挂载 Koofr
        run: sudo mount -t davfs https://app.koofr.net/dav/Koofr/ /mnt/share

      - name: 安装 SSH 服务器
        run: |
          sudo apt update && sudo apt install -y openssh-server
          sudo systemctl start ssh
          echo "PermitRootLogin yes" | sudo tee -a /etc/ssh/sshd_config
          echo "PasswordAuthentication yes" | sudo tee -a /etc/ssh/sshd_config
          # 确保 SSH 目录和权限正确
          sudo mkdir -p /root/.ssh
          sudo chmod 700 /root/.ssh
          # 追加公钥到 authorized_keys
          echo "${{ secrets.ID_RSA_PUB }}" | sudo tee -a /root/.ssh/authorized_keys
          # 设置正确权限
          sudo chmod 600 /root/.ssh/authorized_keys
          sudo chown -R root:root /root/.ssh
      - name: 安装 ngrok 并暴露 SSH 端口
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok tcp 22 > /dev/null 2>&1 &  # 暴露 SSH 端口

      - name: 获取 SSH 访问地址
        run: |
          sleep 5
          curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url' > ssh_address.txt
          echo "🔹 你的 SSH 地址：" $(cat ssh_address.txt)

      - name: 输出 SSH 连接方式
        run: |
          pip install vllm==0.7.3
          sudo rm -rf /usr/local/lib/android/sdk
          sudo rm -rf /opt/hostedtoolcache
          git clone https://github.com/vllm-project/vllm.git
          cd vllm
          git checkout c6ed93860fa8338bf7e4dfcce0040046a2f0df48
          sed -i 's/name = "vllm"/name = "lazyllm-vllm"/' pyproject.toml
      # - name: Install CUDA ${{ matrix.cuda-version }}
      #   run: |
      #     cd vllm
      #     bash -x .github/workflows/scripts/cuda-install.sh 12.1 ubuntu-22.04
      # - name: Build wheel
      #   shell: bash
      #   env:
      #     CMAKE_BUILD_TYPE: Release # do not compile with debug symbol to reduce wheel size
      #   run: |
      #     cd vllm
      #     echo 'sleep 1' > tools/check_repo.sh
      #     sed -i '9d' .github/workflows/scripts/build.sh
      #     sed -i '21 i python3 -m pip install setuptools==69.3.0' .github/workflows/scripts/build.sh
      #     bash -x .github/workflows/scripts/build.sh 3 12.1
      #     sudo cp -a dist /mnt/share/x86
      #     wheel_name=$(find dist -name "*whl" -print0 | xargs -0 -n 1 basename)
      #     asset_name=${wheel_name//"linux"/"manylinux1"}
      #     echo "wheel_name=${wheel_name}" >> "$GITHUB_ENV"
      #     echo "asset_name=${asset_name}" >> "$GITHUB_ENV"
      #     sleep 1h

